{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Transform": "AWS::Serverless-2016-10-31",
  "Globals": {
    "Function": {
      "Runtime": "nodejs6.10",
      "Handler": "index.handler",
      "CodeUri": "s3://uhm1/mock-fn.js.zip"
    }
  },
  "Resources": {
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        }
      }
    },
    "TestappStaging": {
      "Type": "AWS::Serverless::Api",
      "Properties": {
        "StageName": "staging",
        "DefinitionBody": {
          "swagger": "2.0",
          "info": {
            "title": {
              "Ref": "AWS::StackName"
            }
          },
          "paths": {
            "/": {
              "get": {
                "consumes": [
                  "application/x-www-form-urlencoded",
                  "text/html",
                  "multipart/form-data"
                ],
                "produces": [
                  "text/html"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Set-Cookie": {
                        "type": "string"
                      },
                      "Location": {
                        "type": "string"
                      },
                      "Content-Type": {
                        "type": "string"
                      }
                    }
                  },
                  "302": {
                    "description": "302 response",
                    "headers": {
                      "Set-Cookie": {
                        "type": "string"
                      },
                      "Location": {
                        "type": "string"
                      },
                      "Content-Type": {
                        "type": "string"
                      }
                    }
                  },
                  "403": {
                    "description": "403 response",
                    "headers": {
                      "Set-Cookie": {
                        "type": "string"
                      },
                      "Location": {
                        "type": "string"
                      },
                      "Content-Type": {
                        "type": "string"
                      }
                    }
                  },
                  "404": {
                    "description": "404 response",
                    "headers": {
                      "Set-Cookie": {
                        "type": "string"
                      },
                      "Location": {
                        "type": "string"
                      },
                      "Content-Type": {
                        "type": "string"
                      }
                    }
                  },
                  "500": {
                    "description": "500 response",
                    "headers": {
                      "Set-Cookie": {
                        "type": "string"
                      },
                      "Location": {
                        "type": "string"
                      },
                      "Content-Type": {
                        "type": "string"
                      }
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "type": "aws",
                  "uri": "Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TestappStagingGetIndex.Arn}/invocations",
                  "passthroughBehavior": "when_no_match",
                  "httpMethod": "POST",
                  "requestTemplates": {
                    "text/html": "{\n  \"body\" : $input.json('$'),\n  \"path\": \"$context.resourcePath\",\n  \"headers\": {\n    #foreach($header in $input.params().header.keySet())\n    \"$header\": \"$util.escapeJavaScript($input.params().header.get($header))\" #if($foreach.hasNext),#end\n\n    #end\n  },\n  \"method\": \"$context.httpMethod\",\n  \"params\": {\n    #foreach($param in $input.params().path.keySet())\n    \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\" #if($foreach.hasNext),#end\n\n    #end\n  },\n  \"query\": {\n    #foreach($queryParam in $input.params().querystring.keySet())\n    \"$queryParam\": \"$util.escapeJavaScript($input.params().querystring.get($queryParam))\" #if($foreach.hasNext),#end\n\n    #end\n  }  \n}\n",
                    "multipart/form-data": "## many eyeballs where in this code\n## convert HTML POST data or HTTP GET query string to JSON\n## most recent edit adds empty form var support\n#*Ref: \n\n  https://gist.github.com/ryanray/668022ad2432e38493df\n  https://github.com/mweagle/Sparta/blob/master/resources/provision/apigateway/inputmapping_formencoded.vtl\n  https://forums.aws.amazon.com/thread.jspa?threadID=220274&tstart=0\n  http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\n*#\n\n## get the raw post data from the AWS built-in variable and give it a nicer name\n#if ($context.httpMethod == \"POST\")\n #set($rawAPIData = $input.path('$'))\n#elseif ($context.httpMethod == \"GET\")\n #set($rawAPIData = $input.params().querystring)\n #set($rawAPIData = $rawAPIData.toString())\n #set($rawAPIDataLength = $rawAPIData.length() - 1)\n #set($rawAPIData = $rawAPIData.substring(1, $rawAPIDataLength))\n #set($rawAPIData = $rawAPIData.replace(\", \", \"&\"))\n#else\n #set($rawAPIData = \"\")\n#end\n\n## first we get the number of \"&\" in the string, this tells us if there is more than one key value pair\n#set($countAmpersands = $rawAPIData.length() - $rawAPIData.replace(\"&\", \"\").length())\n\n## if there are no \"&\" at all then we have only one key value pair.\n## we append an ampersand to the string so that we can tokenise it the same way as multiple kv pairs.\n## the \"empty\" kv pair to the right of the ampersand will be ignored anyway.\n#if ($countAmpersands == 0)\n #set($rawPostData = $rawAPIData + \"&\")\n#end\n\n## now we tokenise using the ampersand(s)\n#set($tokenisedAmpersand = $rawAPIData.split(\"&\"))\n\n## we set up a variable to hold the valid key value pairs\n#set($tokenisedEquals = [])\n\n## now we set up a loop to find the valid key value pairs, which must contain only one \"=\"\n#foreach( $kvPair in $tokenisedAmpersand )\n #set($countEquals = $kvPair.length() - $kvPair.replace(\"=\", \"\").length())\n #if ($countEquals == 1)\n  #set($kvTokenised = $kvPair.split(\"=\"))\n  #if ($kvTokenised[0].length() > 0)\n   ## we found a valid key value pair. add it to the list.\n   #set($devNull = $tokenisedEquals.add($kvPair))\n  #end\n #end\n#end\n\n{\n  \"method\": \"$context.httpMethod\",\n  \"path\": \"$context.resourcePath\",\n  \"body\" : {\n    #foreach( $kvPair in $tokenisedEquals )\n      ## finally we output the JSON for this pair and append a comma if this isn't the last pair\n      #set($kvTokenised = $kvPair.split(\"=\"))\n      \"$util.urlDecode($kvTokenised[0])\" : #if($kvTokenised.size() == 2)\"$util.urlDecode($kvTokenised[1])\"#{else}\"\"#end#if( $foreach.hasNext ),#end\n    #end\n  },\n  \"headers\": {\n    #foreach($param in $input.params().header.keySet())\n    \"$param\": \"$util.escapeJavaScript($input.params().header.get($param))\" #if($foreach.hasNext),#end\n    #end\n  },\n  \"query\": {\n    #foreach($param in $input.params().querystring.keySet())\n    \"$param\": \"$util.escapeJavaScript($input.params().querystring.get($param))\" #if($foreach.hasNext),#end\n\n    #end\n  },\n  \"params\": {\n    #foreach($param in $input.params().path.keySet())\n    \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\" #if($foreach.hasNext),#end\n\n    #end\n  }\n}\n",
                    "application/x-www-form-urlencoded": "## many eyeballs where in this code\n## convert HTML POST data or HTTP GET query string to JSON\n## most recent edit adds empty form var support\n#*Ref: \n\n  https://gist.github.com/ryanray/668022ad2432e38493df\n  https://github.com/mweagle/Sparta/blob/master/resources/provision/apigateway/inputmapping_formencoded.vtl\n  https://forums.aws.amazon.com/thread.jspa?threadID=220274&tstart=0\n  http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\n*#\n\n## get the raw post data from the AWS built-in variable and give it a nicer name\n#if ($context.httpMethod == \"POST\")\n #set($rawAPIData = $input.path('$'))\n#elseif ($context.httpMethod == \"GET\")\n #set($rawAPIData = $input.params().querystring)\n #set($rawAPIData = $rawAPIData.toString())\n #set($rawAPIDataLength = $rawAPIData.length() - 1)\n #set($rawAPIData = $rawAPIData.substring(1, $rawAPIDataLength))\n #set($rawAPIData = $rawAPIData.replace(\", \", \"&\"))\n#else\n #set($rawAPIData = \"\")\n#end\n\n## first we get the number of \"&\" in the string, this tells us if there is more than one key value pair\n#set($countAmpersands = $rawAPIData.length() - $rawAPIData.replace(\"&\", \"\").length())\n\n## if there are no \"&\" at all then we have only one key value pair.\n## we append an ampersand to the string so that we can tokenise it the same way as multiple kv pairs.\n## the \"empty\" kv pair to the right of the ampersand will be ignored anyway.\n#if ($countAmpersands == 0)\n #set($rawPostData = $rawAPIData + \"&\")\n#end\n\n## now we tokenise using the ampersand(s)\n#set($tokenisedAmpersand = $rawAPIData.split(\"&\"))\n\n## we set up a variable to hold the valid key value pairs\n#set($tokenisedEquals = [])\n\n## now we set up a loop to find the valid key value pairs, which must contain only one \"=\"\n#foreach( $kvPair in $tokenisedAmpersand )\n #set($countEquals = $kvPair.length() - $kvPair.replace(\"=\", \"\").length())\n #if ($countEquals == 1)\n  #set($kvTokenised = $kvPair.split(\"=\"))\n  #if ($kvTokenised[0].length() > 0)\n   ## we found a valid key value pair. add it to the list.\n   #set($devNull = $tokenisedEquals.add($kvPair))\n  #end\n #end\n#end\n\n{\n  \"method\": \"$context.httpMethod\",\n  \"path\": \"$context.resourcePath\",\n  \"body\" : {\n    #foreach( $kvPair in $tokenisedEquals )\n      ## finally we output the JSON for this pair and append a comma if this isn't the last pair\n      #set($kvTokenised = $kvPair.split(\"=\"))\n      \"$util.urlDecode($kvTokenised[0])\" : #if($kvTokenised.size() == 2)\"$util.urlDecode($kvTokenised[1])\"#{else}\"\"#end#if( $foreach.hasNext ),#end\n    #end\n  },\n  \"headers\": {\n    #foreach($param in $input.params().header.keySet())\n    \"$param\": \"$util.escapeJavaScript($input.params().header.get($param))\" #if($foreach.hasNext),#end\n    #end\n  },\n  \"query\": {\n    #foreach($param in $input.params().querystring.keySet())\n    \"$param\": \"$util.escapeJavaScript($input.params().querystring.get($param))\" #if($foreach.hasNext),#end\n\n    #end\n  },\n  \"params\": {\n    #foreach($param in $input.params().path.keySet())\n    \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\" #if($foreach.hasNext),#end\n\n    #end\n  }\n}\n"
                  },
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Set-Cookie": "integration.response.body.cookie",
                        "method.response.header.Content-Type": "'text/html; charset=utf-8'",
                        "method.response.header.Location": "integration.response.body.errorMessage"
                      },
                      "responseTemplates": {
                        "text/html": "$input.path('$.html')"
                      }
                    },
                    ".*statusCode\\\":403.*": {
                      "statusCode": "403",
                      "responseParameters": {
                        "method.response.header.Set-Cookie": "integration.response.body.cookie",
                        "method.response.header.Content-Type": "'text/html; charset=utf-8'",
                        "method.response.header.Location": "integration.response.body.errorMessage"
                      },
                      "responseTemplates": {
                        "text/html": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n$errorMessageObj.html\n"
                      }
                    },
                    "(.*statusCode\\\":302.*)|^(http|/.*)": {
                      "statusCode": "302",
                      "responseParameters": {
                        "method.response.header.Set-Cookie": "integration.response.body.cookie",
                        "method.response.header.Content-Type": "'text/html; charset=utf-8'",
                        "method.response.header.Location": "integration.response.body.errorMessage"
                      },
                      "responseTemplates": {
                        "text/html": "$input.path('$.errorMessage')"
                      }
                    },
                    ".*statusCode\\\":404.*": {
                      "statusCode": "404",
                      "responseParameters": {
                        "method.response.header.Set-Cookie": "integration.response.body.cookie",
                        "method.response.header.Content-Type": "'text/html; charset=utf-8'",
                        "method.response.header.Location": "integration.response.body.errorMessage"
                      },
                      "responseTemplates": {
                        "text/html": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n$errorMessageObj.html\n"
                      }
                    },
                    ".*statusCode\\\":500.*": {
                      "statusCode": "500",
                      "responseParameters": {
                        "method.response.header.Set-Cookie": "integration.response.body.cookie",
                        "method.response.header.Content-Type": "'text/html; charset=utf-8'",
                        "method.response.header.Location": "integration.response.body.errorMessage"
                      },
                      "responseTemplates": {
                        "text/html": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n$errorMessageObj.html\n"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "LambdaPermission": {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
          "Action": "lambda:invokeFunction",
          "FunctionName": {
            "Fn::GetAtt": [
              "GreetingLambda",
              "Arn"
            ]
          },
          "Principal": "apigateway.amazonaws.com",
          "SourceArn": {
            "Fn::Join": [
              "",
              [
                "arn:aws:execute-api:",
                {
                  "Ref": "AWS::Region"
                },
                ":",
                {
                  "Ref": "AWS::AccountId"
                },
                ":",
                {
                  "Ref": "TestappStaging"
                },
                "/*"
              ]
            ]
          }
        }
      }
    },
    "TestappStagingGetIndex": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Events": {
          "TestappStagingGetIndex": {
            "Type": "Api",
            "Properties": {
              "RestApiId": "TestappStaging",
              "Path": "/",
              "Method": "GET"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        }
      }
    },
    "TestappProduction": {
      "Type": "AWS::Serverless::Api",
      "Properties": {
        "StageName": "production",
        "DefinitionBody": {
          "swagger": "2.0",
          "info": {
            "title": {
              "Ref": "AWS::StackName"
            }
          },
          "paths": {
            "/": {
              "get": {
                "consumes": [
                  "application/x-www-form-urlencoded",
                  "text/html",
                  "multipart/form-data"
                ],
                "produces": [
                  "text/html"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Set-Cookie": {
                        "type": "string"
                      },
                      "Location": {
                        "type": "string"
                      },
                      "Content-Type": {
                        "type": "string"
                      }
                    }
                  },
                  "302": {
                    "description": "302 response",
                    "headers": {
                      "Set-Cookie": {
                        "type": "string"
                      },
                      "Location": {
                        "type": "string"
                      },
                      "Content-Type": {
                        "type": "string"
                      }
                    }
                  },
                  "403": {
                    "description": "403 response",
                    "headers": {
                      "Set-Cookie": {
                        "type": "string"
                      },
                      "Location": {
                        "type": "string"
                      },
                      "Content-Type": {
                        "type": "string"
                      }
                    }
                  },
                  "404": {
                    "description": "404 response",
                    "headers": {
                      "Set-Cookie": {
                        "type": "string"
                      },
                      "Location": {
                        "type": "string"
                      },
                      "Content-Type": {
                        "type": "string"
                      }
                    }
                  },
                  "500": {
                    "description": "500 response",
                    "headers": {
                      "Set-Cookie": {
                        "type": "string"
                      },
                      "Location": {
                        "type": "string"
                      },
                      "Content-Type": {
                        "type": "string"
                      }
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "type": "aws",
                  "uri": "Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TestappProductionGetIndex.Arn}/invocations",
                  "passthroughBehavior": "when_no_match",
                  "httpMethod": "POST",
                  "requestTemplates": {
                    "text/html": "{\n  \"body\" : $input.json('$'),\n  \"path\": \"$context.resourcePath\",\n  \"headers\": {\n    #foreach($header in $input.params().header.keySet())\n    \"$header\": \"$util.escapeJavaScript($input.params().header.get($header))\" #if($foreach.hasNext),#end\n\n    #end\n  },\n  \"method\": \"$context.httpMethod\",\n  \"params\": {\n    #foreach($param in $input.params().path.keySet())\n    \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\" #if($foreach.hasNext),#end\n\n    #end\n  },\n  \"query\": {\n    #foreach($queryParam in $input.params().querystring.keySet())\n    \"$queryParam\": \"$util.escapeJavaScript($input.params().querystring.get($queryParam))\" #if($foreach.hasNext),#end\n\n    #end\n  }  \n}\n",
                    "multipart/form-data": "## many eyeballs where in this code\n## convert HTML POST data or HTTP GET query string to JSON\n## most recent edit adds empty form var support\n#*Ref: \n\n  https://gist.github.com/ryanray/668022ad2432e38493df\n  https://github.com/mweagle/Sparta/blob/master/resources/provision/apigateway/inputmapping_formencoded.vtl\n  https://forums.aws.amazon.com/thread.jspa?threadID=220274&tstart=0\n  http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\n*#\n\n## get the raw post data from the AWS built-in variable and give it a nicer name\n#if ($context.httpMethod == \"POST\")\n #set($rawAPIData = $input.path('$'))\n#elseif ($context.httpMethod == \"GET\")\n #set($rawAPIData = $input.params().querystring)\n #set($rawAPIData = $rawAPIData.toString())\n #set($rawAPIDataLength = $rawAPIData.length() - 1)\n #set($rawAPIData = $rawAPIData.substring(1, $rawAPIDataLength))\n #set($rawAPIData = $rawAPIData.replace(\", \", \"&\"))\n#else\n #set($rawAPIData = \"\")\n#end\n\n## first we get the number of \"&\" in the string, this tells us if there is more than one key value pair\n#set($countAmpersands = $rawAPIData.length() - $rawAPIData.replace(\"&\", \"\").length())\n\n## if there are no \"&\" at all then we have only one key value pair.\n## we append an ampersand to the string so that we can tokenise it the same way as multiple kv pairs.\n## the \"empty\" kv pair to the right of the ampersand will be ignored anyway.\n#if ($countAmpersands == 0)\n #set($rawPostData = $rawAPIData + \"&\")\n#end\n\n## now we tokenise using the ampersand(s)\n#set($tokenisedAmpersand = $rawAPIData.split(\"&\"))\n\n## we set up a variable to hold the valid key value pairs\n#set($tokenisedEquals = [])\n\n## now we set up a loop to find the valid key value pairs, which must contain only one \"=\"\n#foreach( $kvPair in $tokenisedAmpersand )\n #set($countEquals = $kvPair.length() - $kvPair.replace(\"=\", \"\").length())\n #if ($countEquals == 1)\n  #set($kvTokenised = $kvPair.split(\"=\"))\n  #if ($kvTokenised[0].length() > 0)\n   ## we found a valid key value pair. add it to the list.\n   #set($devNull = $tokenisedEquals.add($kvPair))\n  #end\n #end\n#end\n\n{\n  \"method\": \"$context.httpMethod\",\n  \"path\": \"$context.resourcePath\",\n  \"body\" : {\n    #foreach( $kvPair in $tokenisedEquals )\n      ## finally we output the JSON for this pair and append a comma if this isn't the last pair\n      #set($kvTokenised = $kvPair.split(\"=\"))\n      \"$util.urlDecode($kvTokenised[0])\" : #if($kvTokenised.size() == 2)\"$util.urlDecode($kvTokenised[1])\"#{else}\"\"#end#if( $foreach.hasNext ),#end\n    #end\n  },\n  \"headers\": {\n    #foreach($param in $input.params().header.keySet())\n    \"$param\": \"$util.escapeJavaScript($input.params().header.get($param))\" #if($foreach.hasNext),#end\n    #end\n  },\n  \"query\": {\n    #foreach($param in $input.params().querystring.keySet())\n    \"$param\": \"$util.escapeJavaScript($input.params().querystring.get($param))\" #if($foreach.hasNext),#end\n\n    #end\n  },\n  \"params\": {\n    #foreach($param in $input.params().path.keySet())\n    \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\" #if($foreach.hasNext),#end\n\n    #end\n  }\n}\n",
                    "application/x-www-form-urlencoded": "## many eyeballs where in this code\n## convert HTML POST data or HTTP GET query string to JSON\n## most recent edit adds empty form var support\n#*Ref: \n\n  https://gist.github.com/ryanray/668022ad2432e38493df\n  https://github.com/mweagle/Sparta/blob/master/resources/provision/apigateway/inputmapping_formencoded.vtl\n  https://forums.aws.amazon.com/thread.jspa?threadID=220274&tstart=0\n  http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\n*#\n\n## get the raw post data from the AWS built-in variable and give it a nicer name\n#if ($context.httpMethod == \"POST\")\n #set($rawAPIData = $input.path('$'))\n#elseif ($context.httpMethod == \"GET\")\n #set($rawAPIData = $input.params().querystring)\n #set($rawAPIData = $rawAPIData.toString())\n #set($rawAPIDataLength = $rawAPIData.length() - 1)\n #set($rawAPIData = $rawAPIData.substring(1, $rawAPIDataLength))\n #set($rawAPIData = $rawAPIData.replace(\", \", \"&\"))\n#else\n #set($rawAPIData = \"\")\n#end\n\n## first we get the number of \"&\" in the string, this tells us if there is more than one key value pair\n#set($countAmpersands = $rawAPIData.length() - $rawAPIData.replace(\"&\", \"\").length())\n\n## if there are no \"&\" at all then we have only one key value pair.\n## we append an ampersand to the string so that we can tokenise it the same way as multiple kv pairs.\n## the \"empty\" kv pair to the right of the ampersand will be ignored anyway.\n#if ($countAmpersands == 0)\n #set($rawPostData = $rawAPIData + \"&\")\n#end\n\n## now we tokenise using the ampersand(s)\n#set($tokenisedAmpersand = $rawAPIData.split(\"&\"))\n\n## we set up a variable to hold the valid key value pairs\n#set($tokenisedEquals = [])\n\n## now we set up a loop to find the valid key value pairs, which must contain only one \"=\"\n#foreach( $kvPair in $tokenisedAmpersand )\n #set($countEquals = $kvPair.length() - $kvPair.replace(\"=\", \"\").length())\n #if ($countEquals == 1)\n  #set($kvTokenised = $kvPair.split(\"=\"))\n  #if ($kvTokenised[0].length() > 0)\n   ## we found a valid key value pair. add it to the list.\n   #set($devNull = $tokenisedEquals.add($kvPair))\n  #end\n #end\n#end\n\n{\n  \"method\": \"$context.httpMethod\",\n  \"path\": \"$context.resourcePath\",\n  \"body\" : {\n    #foreach( $kvPair in $tokenisedEquals )\n      ## finally we output the JSON for this pair and append a comma if this isn't the last pair\n      #set($kvTokenised = $kvPair.split(\"=\"))\n      \"$util.urlDecode($kvTokenised[0])\" : #if($kvTokenised.size() == 2)\"$util.urlDecode($kvTokenised[1])\"#{else}\"\"#end#if( $foreach.hasNext ),#end\n    #end\n  },\n  \"headers\": {\n    #foreach($param in $input.params().header.keySet())\n    \"$param\": \"$util.escapeJavaScript($input.params().header.get($param))\" #if($foreach.hasNext),#end\n    #end\n  },\n  \"query\": {\n    #foreach($param in $input.params().querystring.keySet())\n    \"$param\": \"$util.escapeJavaScript($input.params().querystring.get($param))\" #if($foreach.hasNext),#end\n\n    #end\n  },\n  \"params\": {\n    #foreach($param in $input.params().path.keySet())\n    \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\" #if($foreach.hasNext),#end\n\n    #end\n  }\n}\n"
                  },
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Set-Cookie": "integration.response.body.cookie",
                        "method.response.header.Content-Type": "'text/html; charset=utf-8'",
                        "method.response.header.Location": "integration.response.body.errorMessage"
                      },
                      "responseTemplates": {
                        "text/html": "$input.path('$.html')"
                      }
                    },
                    ".*statusCode\\\":403.*": {
                      "statusCode": "403",
                      "responseParameters": {
                        "method.response.header.Set-Cookie": "integration.response.body.cookie",
                        "method.response.header.Content-Type": "'text/html; charset=utf-8'",
                        "method.response.header.Location": "integration.response.body.errorMessage"
                      },
                      "responseTemplates": {
                        "text/html": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n$errorMessageObj.html\n"
                      }
                    },
                    "(.*statusCode\\\":302.*)|^(http|/.*)": {
                      "statusCode": "302",
                      "responseParameters": {
                        "method.response.header.Set-Cookie": "integration.response.body.cookie",
                        "method.response.header.Content-Type": "'text/html; charset=utf-8'",
                        "method.response.header.Location": "integration.response.body.errorMessage"
                      },
                      "responseTemplates": {
                        "text/html": "$input.path('$.errorMessage')"
                      }
                    },
                    ".*statusCode\\\":404.*": {
                      "statusCode": "404",
                      "responseParameters": {
                        "method.response.header.Set-Cookie": "integration.response.body.cookie",
                        "method.response.header.Content-Type": "'text/html; charset=utf-8'",
                        "method.response.header.Location": "integration.response.body.errorMessage"
                      },
                      "responseTemplates": {
                        "text/html": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n$errorMessageObj.html\n"
                      }
                    },
                    ".*statusCode\\\":500.*": {
                      "statusCode": "500",
                      "responseParameters": {
                        "method.response.header.Set-Cookie": "integration.response.body.cookie",
                        "method.response.header.Content-Type": "'text/html; charset=utf-8'",
                        "method.response.header.Location": "integration.response.body.errorMessage"
                      },
                      "responseTemplates": {
                        "text/html": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n$errorMessageObj.html\n"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "LambdaPermission": {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
          "Action": "lambda:invokeFunction",
          "FunctionName": {
            "Fn::GetAtt": [
              "GreetingLambda",
              "Arn"
            ]
          },
          "Principal": "apigateway.amazonaws.com",
          "SourceArn": {
            "Fn::Join": [
              "",
              [
                "arn:aws:execute-api:",
                {
                  "Ref": "AWS::Region"
                },
                ":",
                {
                  "Ref": "AWS::AccountId"
                },
                ":",
                {
                  "Ref": "TestappProduction"
                },
                "/*"
              ]
            ]
          }
        }
      }
    },
    "TestappProductionGetIndex": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Events": {
          "TestappProductionGetIndex": {
            "Type": "Api",
            "Properties": {
              "RestApiId": "TestappProduction",
              "Path": "/",
              "Method": "GET"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        }
      }
    }
  }
}